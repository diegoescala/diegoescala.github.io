["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ ","~$console","~$re-frame.loggers","~$set-timeout!","~$re-frame.interop"],"~:excludes",["~#set",[]],"~:name","~$re-frame.fx","~:imports",null,"~:requires",["^ ","^6","^6","~$re-frame.interceptor","^=","~$re-frame.events","^>","~$re-frame.trace","^?","~$re-frame.registrar","^@","~$router","~$re-frame.router","^B","^B","~$trace","^?","~$events","^>","^4","^4","~$re-frame.db","^E"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","^3","^4","~$app-db","^E","~$->interceptor","^=","^5","^6","~$get-handler","^@","~$clear-handlers","^@","~$register-handler","^@"],"~:defs",["^ ","~$kind",["^ ","^9","~$re-frame.fx/kind","~:file","resources/public/js/compiled/out/re_frame/fx.cljc","~:line",15,"~:column",1,"~:end-line",15,"~:end-column",10,"~:meta",["^ ","^P","/Users/diegoescala/projects/claimr/resources/public/js/compiled/out/re_frame/fx.cljc","^Q",15,"^R",6,"^S",15,"^T",10],"~:tag","~$cljs.core/Keyword"],"~$reg-fx",["^ ","~:protocol-inline",null,"^U",["^ ","^P","/Users/diegoescala/projects/claimr/resources/public/js/compiled/out/re_frame/fx.cljc","^Q",18,"^R",7,"^S",18,"^T",13,"~:arglists",["~#list",["~$quote",["^[",[["~$id","~$handler"]]]]],"~:doc","Register the given effect `handler` for the given `id`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a side-effecting function which takes a single argument and whose return\n  value is ignored.\n\n  Example Use\n  -----------\n\n  First, registration ... associate `:effect2` with a handler.\n\n  (reg-fx\n     :effect2\n     (fn [value]\n        ... do something side-effect-y))\n\n  Then, later, if an event handler were to return this effects map ...\n\n  {...\n   :effect2  [1 2]}\n\n   ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n   called with an argument of `[1 2]`."],"^9","~$re-frame.fx/reg-fx","^P","resources/public/js/compiled/out/re_frame/fx.cljc","^T",13,"~:method-params",["^[",[["^11","^12"]]],"~:protocol-impl",null,"~:arglists-meta",["^[",[null,null]],"^R",1,"~:variadic?",false,"^Q",18,"~:ret-tag","~$any","^S",18,"~:max-fixed-arity",2,"~:fn-var",true,"^Z",["^[",["^10",["^[",[["^11","^12"]]]]],"^13","Register the given effect `handler` for the given `id`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a side-effecting function which takes a single argument and whose return\n  value is ignored.\n\n  Example Use\n  -----------\n\n  First, registration ... associate `:effect2` with a handler.\n\n  (reg-fx\n     :effect2\n     (fn [value]\n        ... do something side-effect-y))\n\n  Then, later, if an event handler were to return this effects map ...\n\n  {...\n   :effect2  [1 2]}\n\n   ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n   called with an argument of `[1 2]`."],"~$do-fx",["^ ","^U",["^ ","^P","/Users/diegoescala/projects/claimr/resources/public/js/compiled/out/re_frame/fx.cljc","^Q",47,"^R",6,"^S",47,"^T",11],"^9","~$re-frame.fx/do-fx","^P","resources/public/js/compiled/out/re_frame/fx.cljc","^T",11,"^R",1,"^Q",47,"^S",47,"^V","~$cljs.core/IMap","^13","An interceptor whose `:after` actions the contents of `:effects`. As a result,\n  this interceptor is Domino 3.\n\n  This interceptor is silently added (by reg-event-db etc) to the front of\n  interceptor chains for all events.\n\n  For each key in `:effects` (a map), it calls the registered `effects handler`\n  (see `reg-fx` for registration of effect handlers).\n\n  So, if `:effects` was:\n      {:dispatch  [:hello 42]\n       :db        {...}\n       :undo      \"set flag\"}\n\n  it will call the registered effect handlers for each of the map's keys:\n  `:dispatch`, `:undo` and `:db`. When calling each handler, provides the map\n  value for that key - so in the example above the effect handler for :dispatch\n  will be given one arg `[:hello 42]`.\n\n  You cannot rely on the ordering in which effects are executed."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^C","^?","^?","^?"],"~:cljs.analyzer/constants",["^ ","~:seen",["^8",["~:db","~:do-fx","~:start","~:dispatch-n","~:duration","~:deregister-event-handler","~:dispatch","~:after","~:event/do-fx","~:id","~:effects","~:error","~:end","~:ms","~:fx","~:op-type","~:dispatch-later"]],"~:order",["^1R","^1M","^1E","^1K","^1S","^1L","^1F","^1H","^1P","^1N","^1O","^1T","^1Q","^1J","^1G","^1I","^1D"]],"^13",null]